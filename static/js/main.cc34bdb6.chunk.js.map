{"version":3,"sources":["context/siteContext.js","hooks/useForm.js","components/form/form.js","components/list/list.js","components/pagination.js","components/todo/todo.js","components/header.js","components/siteStyles.js","app.js","index.js"],"names":["SiteContext","React","createContext","Site","props","useState","itemsPerPage","setItemsPerPage","defaultSort","setDefaultSort","mode","setMode","displayCompletedItems","setDisplayCompletedItems","state","saveSettings","formInput","localStorage","setItem","JSON","stringify","useEffect","getItem","displaySettings","parse","displayCompleted","setSettings","Provider","value","children","useForm","callback","values","setValues","handleChange","event","persist","target","name","console","log","handleSubmit","preventDefault","Form","item","id","uuid","complete","setList","list","onSubmit","className","onChange","type","placeholder","defaultValue","min","max","List","siteContext","useContext","displayList","setDisplayList","indexOfLastPost","currentPage","indexOfFirstPost","currentItems","slice","map","idx","elevation","Elevation","THREE","onClick","toggleComplete","assignee","icon","deleteItem","text","difficulty","Pagination","pageNumbers","i","Math","ceil","totalItems","push","number","paginate","ToDo","incomplete","setIncomplete","setCurrentPage","listOfStatus","setListOfStatus","storedList","sort","a","b","incompleteCount","filter","length","document","title","filteredList","changeList","items","pageNumber","Header","to","SiteStyles","setFormInput","e","inline","toString","checked","display","disabled","label","App","exact","path","Component","Main","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.cc34bdb6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport const SiteContext = React.createContext();\n\nfunction Site(props) {\n\n    const [itemsPerPage, setItemsPerPage] = useState(3)\n    const [defaultSort, setDefaultSort] = useState('difficulty')\n    const [mode, setMode] = useState('light')\n    const [displayCompletedItems, setDisplayCompletedItems] = useState(false)\n\n    const state = {\n        displayCompletedItems,\n        itemsPerPage,\n        defaultSort,\n        mode,\n        setItemsPerPage,\n        setDefaultSort,\n        setMode,\n        setDisplayCompletedItems,\n        saveSettings,\n    };\n\n    function saveSettings(formInput) {\n        localStorage.setItem('displaySettings', JSON.stringify(formInput))\n    }\n\n    function setSettings() {\n        let displaySettings = localStorage.getItem('displaySettings')\n        displaySettings = JSON.parse(displaySettings)\n        setDisplayCompletedItems(displaySettings.displayCompleted)\n        setItemsPerPage(displaySettings.itemsPerPage)\n        setDefaultSort(displaySettings.defaultSort)\n    }\n\n    useEffect(() => {\n        if (localStorage.getItem('displaySettings')) { setSettings() }\n    }, [])\n\n    return (\n        <SiteContext.Provider value={state}>\n            {props.children}\n        </SiteContext.Provider>\n    )\n\n}\n\nexport default Site;","import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n    console.log(values)\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import React, { useEffect, useState } from 'react';\nimport useForm from '../../hooks/useForm.js';\n\nimport { v4 as uuid } from 'uuid';\n\n\nfunction Form(props) {\n\n    const { handleChange, handleSubmit } = useForm(addItem);\n\n    function addItem(item) {\n        item.id = uuid();\n        item.complete = false;\n        props.setList([...props.list, item]);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n\n            <h2>Add To Do Item</h2>\n\n            <label>\n                <span>To Do Item</span>\n                <input className='bp3-input' onChange={handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\" />\n            </label>\n\n            <label>\n                <span>Assigned To</span>\n                <input className='bp3-input' onChange={handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\" />\n            </label>\n\n            <label className=\"bp3-label\">\n                <span className=\"bp3-text\">Difficulty</span>\n                <input className='bp3-slider' onChange={handleChange} defaultValue={3} type=\"range\" min={1} max={5} name=\"difficulty\" />\n            </label>\n\n            <label>\n                <button className='bp3-button bp3-intent-primary' type=\"submit\">Add Item</button>\n            </label>\n        </form>\n    )\n}\n\nexport default Form","import { useContext, useState, useEffect } from \"react\";\nimport { SiteContext } from \"../../context/siteContext\";\nimport { Card, Elevation, Icon, Tag } from \"@blueprintjs/core\";\n\n\nfunction List(props) {\n\n    const siteContext = useContext(SiteContext);\n\n    const [displayList, setDisplayList] = useState([])\n\n    const indexOfLastPost = props.currentPage * siteContext.itemsPerPage;\n    const indexOfFirstPost = indexOfLastPost - siteContext.itemsPerPage;\n    const currentItems = props.list.slice(indexOfFirstPost, indexOfLastPost)\n\n    useEffect(() => {\n        setDisplayList(currentItems)\n    }, [props.list, props.currentPage])\n\n\n    return (\n        <div className=\"toDoList\">\n            {displayList.map((item, idx) => (\n                <Card elevation={Elevation.THREE}>\n                    <div id={idx} key={item.id}>\n                        <div className='title'>\n                            <span className={`bp3-tag bp3-round ${item.complete ? 'bp3-intent-danger' : 'bp3-intent-success'}`} onClick={() => props.toggleComplete(item.id)}>{item.complete ? 'Complete' : 'In Progress'}</span>\n                            <p><small>Assigned to: {item.assignee}</small></p>\n                            <Icon icon=\"cross\" onClick={() => props.deleteItem(item.id)} />\n                        </div>\n                        <hr />\n                        <p>{item.text}</p>\n                        <p className=\"difficulty\"><small>Difficulty: {item.difficulty}</small></p>\n                    </div>\n                </Card>\n            ))\n            }\n        </div >\n    )\n}\n\nexport default List","function Pagination(props) {\n\n    const pageNumbers = []\n    for (let i = 1; i <= Math.ceil(props.totalItems / props.itemsPerPage); i++) {\n        pageNumbers.push(i)\n    }\n\n    return (\n        <div className=\"pagination\">\n            {pageNumbers.map(number => {\n                return <button className='bp3-button bp3-intent-secondary bp3-elevation-1' onClick={() => props.paginate(number)}>{number}</button>\n            })}\n        </div>\n    )\n}\n\nexport default Pagination","import React, { useEffect, useState } from 'react';\nimport Form from \"../form/form\";\nimport List from \"../list/list\"\nimport { useContext } from \"react\";\nimport { SiteContext } from \"../../context/siteContext\";\nimport Pages from \"../pagination\"\n\nconst ToDo = () => {\n  //context\n  const siteContext = useContext(SiteContext);\n  //states\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [listOfStatus, setListOfStatus] = useState([]);\n\n  //methods\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  };\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  //changes the complete/incomplete status of the item\n  function toggleComplete(id) {\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n    setList(items);\n  };\n\n  //control sort of list based on context\n  const listSort = () => {\n    // console.log('1', list)\n    list.sort((a, b) => a[siteContext.defaultSort] - b[siteContext.defaultSort])\n    // console.log('2', list)\n  }\n\n  //change the displayed list to show only what the context defines\n  const changeList = () => {\n    if (!siteContext.displayCompletedItems) {\n      let filteredList = list.filter(item => item.complete === siteContext.displayCompletedItems)\n      return setListOfStatus(filteredList)\n    }\n    return setListOfStatus(list)\n  }\n\n  //effect hooks\n  useEffect(() => {\n    if (localStorage.getItem('list')) {\n      let storedList = localStorage.getItem('list')\n      let list = JSON.parse(storedList)\n      setList(list)\n    };\n  }, [])\n\n  useEffect(() => {\n    listSort()\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incompleteCount}`;\n    changeList()\n    localStorage.setItem('list', JSON.stringify(list))\n  }, [list]);\n\n  return (\n    <main>\n      <header>\n        <h1>To Do List: {incomplete} items pending</h1>\n      </header>\n      <section>\n        <Form setList={setList} list={list} />\n        <List list={listOfStatus} currentPage={currentPage} toggleComplete={toggleComplete} deleteItem={deleteItem} />\n      </section>\n      <Pages itemsPerPage={siteContext.itemsPerPage} totalItems={listOfStatus.length} paginate={paginate} />\n    </main>\n  );\n};\n\nexport default ToDo;\n","import { Link } from 'react-router-dom';\n\nfunction Header(props) {\n    return (\n        <nav>\n            <Link id='link' to='/'>Home</Link>\n            <Link id='link' to='/styles'>Styles</Link>\n        </nav>\n    )\n}\n\nexport default Header","import React, { useState } from 'react';\nimport { useContext } from \"react\";\nimport { SiteContext } from \"../context/siteContext\";\nimport { FormGroup, Button, Switch, HTMLSelect } from \"@blueprintjs/core\";\n\n\nfunction SiteStyles() {\n    const siteContext = useContext(SiteContext);\n    const [formInput, setFormInput] = useState({})\n    console.log(formInput)\n\n    const handleChange = (e) => {\n        setFormInput({ ...formInput, [e.target.name]: e.target.value })\n        if (e.target.name === 'itemsPerPage') { siteContext.setItemsPerPage(e.target.value) }\n        if (e.target.value === 'defaultSort') { siteContext.setDefaultSort(e.target.value) }\n    }\n\n    const hanldeCompletedToggle = (e) => {\n        let display = !siteContext.displayCompletedItems\n        setFormInput({ ...formInput, [e.target.name]: display })\n        siteContext.setDisplayCompletedItems(display)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // siteContext.setItemsPerPage(formInput['itemsPerPage'])\n        // siteContext.setDefaultSort(formInput['defaultSort'])\n        siteContext.saveSettings(siteContext)\n    }\n\n    return (\n        <FormGroup\n            inline={false}>\n\n            <label>Items Per Page</label>\n            <input name='itemsPerPage' type=\"number\" value={siteContext.itemsPerPage} onChange={handleChange} />\n\n            <span>Default Sort</span>\n            <HTMLSelect name='defaultSort' value={siteContext.defaultSort} onChange={handleChange}>\n                <option value=\"assignee\">Assignee</option>\n                <option value=\"complete\">Complete</option>\n                <option value=\"text\">Text</option>\n                <option value=\"difficulty\">Difficulty</option>\n            </HTMLSelect>\n\n            <span>Display Completed ({siteContext.displayCompletedItems.toString()})?</span>\n            <Switch name='displayCompleted' checked={siteContext.displayCompletedItems} onChange={hanldeCompletedToggle} />\n\n            <span>Dark Mode </span>\n            <Switch disabled={true} label='Coming soon!' name='mode' />\n\n            <Button onClick={handleSubmit}>Submit</Button>\n        </FormGroup>\n    )\n}\n\nexport default SiteStyles","import React from 'react';\nimport SiteContext from \"./context/siteContext\";\nimport ToDo from './components/todo/todo.js';\nimport Header from \"./components/header\";\nimport SiteStyles from \"./components/siteStyles\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./css/app.css\";\nimport \"./css/card.css\";\nimport \"./css/styleForm.css\"\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <SiteContext>\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact path='/'>\n              <ToDo />\n            </Route>\n            <Route exact path='/styles'>\n              <SiteStyles />\n            </Route>\n          </Switch>\n        </Router>\n      </SiteContext>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}